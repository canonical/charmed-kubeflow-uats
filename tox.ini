# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist = fmt, lint, uats

[vars]
all_path = {[vars]driver_path} {[vars]tst_path}
driver_path = {toxinidir}/driver/
tst_path = {toxinidir}/tests/

[testenv]
passenv =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
    KUBECONFIG
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1

[testenv:update-requirements]
allowlist_externals =
    bash
    find
    pip-compile
    xargs
commands =
    ; we must preserve the order of compilation, since each *.in file depends on some *.txt file.
    ; For example, requirements-unit.in depends on requirements.txt and we must compile first
    ; requirements.txt to ensure that requirements-unit.txt get the same dependency as the requirements.txt
    bash -c 'for pattern in "requirements.in" "requirements-fmt.in" "requirements*.in"; do find . -type f -name "$pattern" -exec bash -c "cd \$(dirname "{}") && pip-compile --resolver=backtracking \$(basename "{}")" \;; done'
deps =
    pip-tools
description = Update requirements files by executing pip-compile on all requirements*.in files, including those in subdirs.

[testenv:fmt]
commands =
    isort {[vars]all_path}
    black {[vars]all_path}
deps =
    -r requirements-fmt.txt
description = Apply coding style standards to code

[testenv:lint]
commands =
    # uncomment the following line if this charm owns a lib
    # codespell {[vars]lib_path}
    codespell {toxinidir}/. --skip {toxinidir}/./.git --skip {toxinidir}/./.tox \
      --skip {toxinidir}/./build --skip {toxinidir}/./lib --skip {toxinidir}/./venv \
      --skip {toxinidir}/./.mypy_cache \
      --skip {toxinidir}/./icon.svg --skip *.json.tmpl \
      --ignore-regex=".*codespell-ignore."
    # pflake8 wrapper supports config from pyproject.toml
    pflake8 {[vars]all_path}
    isort --check-only --diff {[vars]all_path}
    black --check --diff {[vars]all_path}
deps =
    -r requirements-lint.txt
description = Check code against coding style standards

[testenv:kubeflow-{local,remote}]
commands =
    # run all tests apart from the ones that use MLFlow
    pytest -vv --tb native {[vars]driver_path} -s --filter "not mlflow" --model kubeflow {posargs}
setenv =
    local: LOCAL = True
    remote: LOCAL = False
deps =
    -r requirements.txt
description = Run UATs for Kubeflow

[testenv:uats-{local,remote}]
# provide a filter when calling tox to (de)select test cases based on their names, e.g.
# * run all tests containing 'kfp' or 'katib' in their name:
#   $ tox -e uats -- --filter "kfp or katib"
# * run any test that doesn't contain 'kserve' in its name:
#   $ tox -e uats -- --filter "not kserve"
# this simulates the behaviour of running 'pytest -k "<filter>"' directly on the test suite:
# https://docs.pytest.org/en/7.4.x/reference/reference.html#command-line-flags
commands = 
    pytest -vv --tb native {[vars]driver_path} -s --model kubeflow {posargs}
setenv =
    local: LOCAL = True
    remote: LOCAL = False
deps =
    -r requirements.txt
description = Run UATs for Kubeflow and Integrations

[testenv:mlflow-{local,remote}]
commands =
    # run all MLFlow UATs
    pytest -vv --tb native {[vars]driver_path} -s --filter "mlflow or e2e-wine" --model kubeflow {posargs}
setenv =
    local: LOCAL = True
    remote: LOCAL = False
deps =
    -r requirements.txt
description = Run UATs for Kubeflow
